//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using OpenNETCF.IO.Ports;

#if UnityBuild
using UnityEngine;
#endif

using System.IO;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using ControlPanelPlugin.Messages;
using ControlPanelPlugin.Utils;
using Boomlagoon.JSON;

namespace ControlPanelPlugin
{
  public class Connection : IJsonConvertable
  {
    public enum State
    {
      Disconnected,
      Connected
    }

    public State CurrentConnectionState { get; set; }
    public State DesiredConnectionState { get; set; }

    public delegate void ConnectionStateChangeHandler(State state);
    public event ConnectionStateChangeHandler ConnectionStateChanged;

    SerialPort stream;
    public string COM { get; set; }
    public int Baud { get; set; }

    public int BytesToWrite { get { return stream != null ? stream.BytesToWrite : 0; } }
    public int BytesToRead { get { return stream != null ? stream.BytesToRead : 0; } }

    public bool Connected { get { return CurrentConnectionState == State.Connected && stream != null && stream.IsOpen; } }

    public Connection()
    {

    }

    public Connection(string com, int baud = 9600)
    {
      COM = com;
      Baud = baud;
    }

    // Use this for initialization
    public void Start()
    {
      DesiredConnectionState = State.Connected;
    }

    public void Stop()
    {
      Disconnect();
      stream = null;
    }

    public void Update()
    {
      UpdateConnectionState();
    }

    private void UpdateConnectionState()
    {
      //Log.Debug("[ControlPanel] " + CurrentConnectionState + ", " + DesiredConnectionState);
      var curr = CurrentConnectionState;
      switch (CurrentConnectionState)
      {
        case State.Disconnected:
          switch (DesiredConnectionState)
          {
            case State.Disconnected:
              // nothing to do
              break;
            case State.Connected:
              Connect();

              break;
          }
          break;

        case State.Connected:
          switch (DesiredConnectionState)
          {
            case State.Disconnected:
              Disconnect();
              break;

            case State.Connected:
              if (stream != null && !stream.IsOpen)
                DesiredConnectionState = State.Disconnected;
              // read and write
              ReadMessages();

              break;
          }
          break;
      }

      if (curr != CurrentConnectionState &&
          ConnectionStateChanged != null)
      {
        ConnectionStateChanged(CurrentConnectionState);
      }
    }


    private void Connect()
    {
      if (string.IsNullOrEmpty(COM) || Baud == 0)
        return;

      if (stream == null)
        stream = new SerialPort(COM, Baud);

      if (!stream.IsOpen)
      {
        stream.Open();
        if (!stream.IsOpen)
        {
          Log.Error("Failed to open serialport");
          return;
        }
      }

      Singleton.Get<MessageManager>().SetStream(stream.BaseStream);
      CurrentConnectionState = State.Connected;
      Log.Info("[ControlPanel] serialport opened");
    }

    public void Disconnect()
    {
      if (IsOpen)
      {
        try
        {
          stream.Close();
        }
        catch (Exception e)
        {
          Log.Error("stream.Close exception: {0}", e.Message);
        }

        stream = null;
      }

      CurrentConnectionState = State.Disconnected;
    }

    public bool IsOpen { get { return stream != null && stream.IsOpen; } }

    void ReadMessages()
    {
      if (stream == null || !stream.IsOpen || stream.BytesToRead < 4)
        return;

#if !DEBUG
      try
      {
#endif
      Singleton.Get<MessageManager>().ReadMsg();

#if !DEBUG
      }
      catch (Exception e)
      {
        Log.Error("Unable to read message from stream: {0}", e.Message);
      }
#endif
    }

    #region IJsonConvertable Members

    public JSONObject ToJson()
    {
      var json = new JSONObject();
      json.Add("com", COM);
      json.Add("baud", Baud);
      return json;
    }

    public void FromJson(JSONObject json)
    {
      COM = json["com"];
      Baud = json["baud"];
    }

    #endregion
  }
}

